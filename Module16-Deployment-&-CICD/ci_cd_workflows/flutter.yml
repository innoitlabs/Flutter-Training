name: Flutter CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to build for'
        required: true
        default: 'android'
        type: choice
        options:
        - android
        - ios
        - both
      build_type:
        description: 'Build type'
        required: true
        default: 'release'
        type: choice
        options:
        - debug
        - release
        - profile

env:
  FLUTTER_VERSION: '3.24.0'

jobs:
  # Test job - runs on all pushes and PRs
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Analyze code
        run: flutter analyze
        
      - name: Run unit tests
        run: flutter test
        
      - name: Run integration tests
        run: flutter test integration_test/
        
      - name: Check formatting
        run: dart format --set-exit-if-changed .
        
      - name: Verify pubspec.yaml
        run: flutter pub deps --style=compact

  # Build Android job
  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          
      - name: Decode Keystore
        if: github.ref == 'refs/heads/main'
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/app/keystore.jks
          
      - name: Create key.properties
        if: github.ref == 'refs/heads/main'
        run: |
          cat > android/key.properties << EOF
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          storeFile=app/keystore.jks
          EOF
          
      - name: Build APK
        run: flutter build apk --release
        
      - name: Build App Bundle
        run: flutter build appbundle --release
        
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: build/app/outputs/flutter-apk/app-release.apk
          
      - name: Upload AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-bundle
          path: build/app/outputs/bundle/release/app-release.aab
          
      - name: Upload to Play Store (Internal)
        if: github.ref == 'refs/heads/main'
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.PLAY_STORE_CONFIG_JSON }}
          packageName: com.example.deployment_demo_app
          releaseFiles: build/app/outputs/bundle/release/app-release.aab
          track: internal
          status: completed

  # Build iOS job
  build-ios:
    name: Build iOS
    runs-on: macos-latest
    needs: test
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest-stable'
          
      - name: Build iOS (no code signing)
        run: flutter build ios --no-codesign --release
        
      - name: Upload iOS build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-build
          path: build/ios/archive/Runner.xcarchive

  # Deploy to TestFlight (iOS)
  deploy-ios:
    name: Deploy to TestFlight
    runs-on: macos-latest
    needs: [test, build-ios]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest-stable'
          
      - name: Setup Code Signing
        uses: apple-actions/import-codesigning-certs@v1
        with:
          p12-file-base64: ${{ secrets.IOS_P12_BASE64 }}
          p12-password: ${{ secrets.IOS_P12_PASSWORD }}
          
      - name: Install Provisioning Profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}" | base64 -d > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
          
      - name: Build and Archive iOS
        run: |
          flutter build ipa --release
          
      - name: Upload to TestFlight
        uses: apple-actions/upload-testflight@v1
        with:
          app-path: build/ios/ipa/deployment_demo_app.ipa
          api-key: ${{ secrets.APPSTORE_CONNECT_API_KEY }}
          api-key-id: ${{ secrets.APPSTORE_CONNECT_API_KEY_ID }}
          api-issuer-id: ${{ secrets.APPSTORE_CONNECT_ISSUER_ID }}

  # Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run security scan
        uses: snyk/actions/dotnet@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Performance test
  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Run performance tests
        run: flutter test --coverage
        
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Notify on completion
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [build-android, build-ios, security-scan, performance]
    if: always()
    
    steps:
      - name: Notify Slack
        if: needs.build-android.result == 'success' || needs.build-ios.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: 'Flutter app build completed successfully!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Notify on failure
        if: needs.build-android.result == 'failure' || needs.build-ios.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: 'Flutter app build failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
